@model IEnumerable<Contabilidad.Models.VM.clsPlanGrupoVM>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="content">
    <div class="box-header with-border">
        <h3 class="box-title">@ViewBag.TipoPersonaDes - Registro de Tipos de Persona a Grupos de Cuentas</h3>

        <div class="box-tools pull-right">
            <div class="has-feedback">
                <a class="btn btn-default btn-sm" href="#" onclick="EditPost();" data-toggle="tooltip" title="Exportar"> <i class="dx-icon-save"></i></a>
                <a class="btn btn-default btn-sm" href="@Url.Action("Index", "PlanGrupo")" data-toggle="tooltip" title="Actualizar"> <i class="fa fa-refresh"></i></a>
                <a class="btn btn-default btn-sm" href="@Url.Action("ReportList", "PlanGrupo")" data-toggle="tooltip" title="Imprimir"> <i class="fa fa-print"></i></a>
                <a class="btn btn-default btn-sm" href="#" onclick="onExport();" data-toggle="tooltip" title="Exportar"> <i class="dx-icon-exportxlsx"></i></a>
            </div>
        </div>
    </div>

    @(Html.DevExtreme().DataGrid<Contabilidad.Models.VM.clsPlanGrupoVM>()
                        .ID("grid")
                        .DataSource(Model, "PlanGrupoId")
                        .AllowColumnResizing(true)
                        .ShowColumnLines(false)
                        .ShowRowLines(true)
                        .ShowBorders(true)
                        .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
                        .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
                        .Paging(p => p.PageSize(10))
                        .Width("100%")
                        .RowAlternationEnabled(true)
                        .Selection(s => s.Mode(SelectionMode.Multiple))
                        .OnCellPrepared("onCellPrepared")
                        .OnContentReady("onContentReady")
                        .Export(e => e.Enabled(false).FileName("PlanGrupo").ExcelWrapTextEnabled(false))
                        .Columns(columns =>
                        {
                            columns.AddFor(m => m.PlanGrupoCod).Width("10%");
                            columns.AddFor(m => m.PlanGrupoDes).Width("30%");
                            columns.AddFor(m => m.PlanGrupoTipoDes).Width("20%");
                            columns.AddFor(m => m.PlanGrupoTipoDetDes).Width("20%");
                            columns.AddFor(m => m.MonedaDes).Width("10%");
                            columns.AddFor(m => m.EstadoDes).Width("10%");
                        })
    )
</section>

<script>
    function onExport() {
        $("#grid").dxDataGrid("instance").exportToExcel(false);
    }

    function onCellPrepared(e) {
        if (e.rowType === "header") {
            e.cellElement.addClass("columnHeaderCSS");
            e.cellElement.find("input").addClass("columnHeaderCSS");
        }
    }

    function onContentReady(e) {
        var str = '@(ViewBag.strPlanGrupoId)';

        array = JSON.parse(str);

        e.component.selectRows(array);
    }

    function EditPost() {
        var datagrid = $('#grid').dxDataGrid('instance');
        var keys = datagrid.getSelectedRowKeys();
        
        $.ajax({
            type: "POST",
            url: '@Url.Action("EditPost", "RegTipoPersona", null)',
            datatype: "json",
            traditional: true,
            data: { 'SelectedKeys': JSON.stringify(keys) }
        });
    }

</script>
